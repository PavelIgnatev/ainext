import {
  Button,
  Col,
  Drawer,
  Form,
  Input,
  notification,
  Row,
  Select,
  Space,
  Spin,
} from 'antd';
import { CopyOutlined } from '@ant-design/icons';
import React, { useState } from 'react';

import { GroupId } from '@/@types/GroupId';
import { Crm } from '@/@types/Crm';

import styles from './startup-widget__drawer.module.css';

const { Option } = Select;

interface StartupWidgetDrawerProps {
  loading: boolean;

  groupId: string;
  groupIdData: GroupId | null;
  groupIdDatabase: {
    users: string[];
    workingDatabase: string[];
  };
  crmData: Crm | null;

  onCloseDrawer: () => void;
  onSumbitDrawer: ({
    data,
    database,
    crm,
  }: {
    data: GroupId;
    database: Array<string>;
    crm: Crm | null;
  }) => void;
}

export const StartupWidgetDrawer = (props: StartupWidgetDrawerProps) => {
  const {
    groupId,
    loading,
    groupIdData,
    groupIdDatabase,
    crmData,
    onCloseDrawer,
    onSumbitDrawer,
  } = props;

  const [hasChanges, setHasChanges] = useState(false);
  const [form] = Form.useForm();

  const initialValues = {
    ...groupIdData,
    groupId,
    database: groupIdDatabase.users.join('\n'),
    workingDatabase: groupIdDatabase.workingDatabase.join('\n'),
    language: groupIdData?.language || 'RUSSIAN',
    messagesCount: groupIdData?.messagesCount || 4,
    currentCount: groupIdData?.currentCount || 0,
    crmType: crmData?.type || 'none',
    crmWebhook: crmData?.webhook || '',
  };

  const checkForChanges = (_: any, allValues: any) => {
    const hasChanges = Object.keys(allValues).some((key) => {
      if (key === 'workingDatabase') return false;
      return (
        JSON.stringify(allValues[key]) !==
        JSON.stringify((initialValues as any)[key])
      );
    });

    setHasChanges(hasChanges);
  };

  const handleCopyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      notification.success({
        message: '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ',
        description: '–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞',
      });
    } catch (error) {
      notification.error({
        message: '–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É',
      });
    }
  };

  const handleSubmit = async () => {
    try {
      const values = await form.validateFields();

      const data: GroupId = {
        groupId: values.groupId,
        name: values.name,
        target: Number(values.target),
        currentCount: Number(values.currentCount),
        messagesCount: Number(values.messagesCount),
        language: values.language,
        aiRole: values.aiRole,
        companyDescription: values.companyDescription,
        goal: values.goal,
        leadDefinition: values.leadDefinition,
        leadGoal: values.leadGoal,
        firstMessagePrompt: values.firstMessagePrompt,
        secondMessagePrompt: values.secondMessagePrompt,
        part: values.part?.trim() || null,
        flowHandling: values.flowHandling?.trim() || null,
        addedInformation: values.addedInformation?.trim() || null,
        addedQuestion: values.addedQuestion?.trim() || null,
      };

      const database = values.database
        .split('\n')
        .map((line: string) => line.trim())
        .filter((line: string) => line.length > 0);

      const crm: Crm | null =
        values.crmType === 'none' || !values.crmType
          ? null
          : {
              groupId: values.groupId,
              type: values.crmType,
              webhook: values.crmWebhook?.trim() || '',
            };

      onSumbitDrawer({ data, database, crm });
    } catch (error) {
      notification.error({
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
        description:
          error instanceof Error
            ? error.message
            : '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è.',
      });
    }
  };

  return (
    <Drawer
      title={
        loading ? (
          <Spin spinning={loading} />
        ) : (
          `${!groupIdData ? '–°–æ–∑–¥–∞–Ω–∏–µ' : '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ'} –∑–∞–ø—É—Å–∫–∞`
        )
      }
      width={820}
      onClose={onCloseDrawer}
      open={Boolean(groupId)}
      classNames={{
        body: styles.drawerBody,
      }}
      extra={
        <Space>
          <Button
            loading={loading}
            disabled={!hasChanges && !loading}
            onClick={handleSubmit}
            type="primary"
          >
            {loading ? '' : !groupIdData ? '–°–æ–∑–¥–∞—Ç—å' : '–û–±–Ω–æ–≤–∏—Ç—å'}
          </Button>
        </Space>
      }
    >
      <Spin spinning={loading} style={{ marginTop: '50px' }}>
        {!loading && groupId && (
          <Form
            form={form}
            layout="vertical"
            onValuesChange={checkForChanges}
            initialValues={initialValues}
          >
            <div className={styles.identifiersSectionTitle}>
              –ü–ê–†–ê–ú–ï–¢–†–´ –ó–ê–ü–£–°–ö–ê
            </div>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item
                  name="groupId"
                  label="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä"
                  rules={[{ required: true }]}
                >
                  <Input disabled placeholder="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ" />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item
                  name="name"
                  label="–ù–∞–∑–≤–∞–Ω–∏–µ"
                  rules={[{ required: true, message: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' }]}
                >
                  <Input placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞" />
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item
                  name="currentCount"
                  label="–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–æ–∫"
                  rules={[
                    {
                      required: true,
                      message: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ',
                    },
                  ]}
                  normalize={(v) => (v === '' ? null : Number(v))}
                >
                  <Input
                    disabled
                    type="number"
                    placeholder="–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–æ–∫"
                  />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item
                  name="target"
                  label="–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–æ–∫"
                  rules={[
                    {
                      required: true,
                      message: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ',
                    },
                  ]}
                  normalize={(v) => (v === '' ? null : Number(v))}
                >
                  <Input
                    type="number"
                    placeholder="–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–æ–∫"
                  />
                </Form.Item>
              </Col>
            </Row>

            <Row gutter={16}>
              <Col span={12}>
                <Form.Item
                  style={{ marginBottom: '10px' }}
                  label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π"
                  name="messagesCount"
                  rules={[{ required: true, message: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' }]}
                >
                  <Select>
                    <Option value={3}>3</Option>
                    <Option value={3.5}>3.5</Option>
                    <Option value={4}>4</Option>
                  </Select>
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item
                  name="language"
                  label="–Ø–∑—ã–∫"
                  rules={[{ required: true, message: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' }]}
                >
                  <Select>
                    <Option value="RUSSIAN">–†–£–°–°–ö–ò–ô</Option>
                    <Option value="UKRAINIAN">–£–ö–†–ê–ò–ù–°–ö–ò–ô</Option>
                    <Option value="ENGLISH">–ê–ù–ì–õ–ò–ô–°–ö–ò–ô</Option>
                  </Select>
                </Form.Item>
              </Col>
            </Row>

            <div className={styles.crmSectionTitle}>CRM</div>
            {groupIdData && groupIdData.googleTableCrmId && (
              <>
                <Row gutter={16}>
                  <Col span={24}>
                    <Form.Item
                      name="googleTableCrmId"
                      label={
                        <div>
                          <div>–°—Å—ã–ª–∫–∞ –Ω–∞ Google Sheets</div>
                          <div
                            style={{
                              color: '#8c8c8c',
                              fontSize: '11px',
                              fontWeight: 'normal',
                              fontStyle: 'italic',
                              marginTop: '2px',
                              fontFamily: 'monospace',
                            }}
                          >
                            üìä –õ–∏–¥—ã –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å
                            –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∏–ª–∏ –ø–æ –º–µ—Å—è—Ü–∞–º –¥–ª—è
                            —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã
                          </div>
                        </div>
                      }
                      style={{ marginBottom: '12px' }}
                    >
                      <div style={{ display: 'flex', alignItems: 'center' }}>
                        <Input
                          disabled
                          value={`https://docs.google.com/spreadsheets/d/${groupIdData.googleTableCrmId}`}
                          style={{ flex: 1 }}
                        />
                        <Button
                          type="text"
                          icon={<CopyOutlined />}
                          onClick={() =>
                            handleCopyToClipboard(
                              `https://docs.google.com/spreadsheets/d/${groupIdData.googleTableCrmId}`
                            )
                          }
                          className={styles.copyButton}
                        />
                      </div>
                    </Form.Item>
                  </Col>
                </Row>
              </>
            )}

            <Row gutter={16}>
              <Col span={24}>
                <Form.Item
                  name="crmType"
                  label="–¢–∏–ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
                  rules={[{ required: true, message: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' }]}
                  style={{ marginBottom: '12px' }}
                >
                  <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏">
                    <Option value="bitrix">Bitrix24</Option>
                    <Option value="amo">–ê–º–æCRM</Option>
                    <Option value="api">Custom API</Option>
                    <Option value="none">–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</Option>
                  </Select>
                </Form.Item>
              </Col>
            </Row>

            <Form.Item
              noStyle
              shouldUpdate={(prev, curr) => prev.crmType !== curr.crmType}
              style={{ marginBottom: '12px' }}
            >
              {({ getFieldValue }) => {
                const crmType = getFieldValue('crmType');
                return crmType && crmType !== 'none' ? (
                  <Row gutter={16}>
                    <Col span={24}>
                      <Form.Item
                        name="crmWebhook"
                        label="Webhook URL"
                        rules={[
                          { required: true, message: '–í–≤–µ–¥–∏—Ç–µ webhook URL' },
                          { type: 'url', message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL' },
                        ]}
                      >
                        <Input
                          placeholder={
                            crmType === 'amo'
                              ? 'https://yoursubdomain.amocrm.ru/api/v4/webhooks/...'
                              : crmType === 'bitrix'
                                ? 'https://your-portal.bitrix24.ru/rest/...'
                                : 'https://your-domain.com/api/webhook'
                          }
                          style={{
                            borderRadius: '6px',
                            border: '1px solid #d9d9d9',
                          }}
                        />
                      </Form.Item>
                    </Col>
                  </Row>
                ) : null;
              }}
            </Form.Item>

            <div className={styles.identifiersSectionTitle}>–ë–ê–ó–ê –î–ê–ù–ù–´–•</div>
            <Row gutter={16}>
              <Col span={24}>
                <Form.Item
                  label="–û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
                  name="database"
                  rules={[{ required: true, message: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' }]}
                >
                  <Input.TextArea rows={6} />
                </Form.Item>
              </Col>
            </Row>

            {groupIdDatabase.workingDatabase.length > 0 && (
              <Row gutter={16}>
                <Col span={24}>
                  <Form.Item
                    label={
                      <div>
                        <div
                          style={{
                            display: 'flex',
                            alignItems: 'center',
                            gap: '6px',
                            fontFamily: 'monospace',
                            fontSize: '13px',
                          }}
                        >
                          <span style={{ color: '#1890ff' }}>‚öôÔ∏è</span>
                          –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–∞—è –±–∞–∑–∞{' '}
                          <span
                            style={{
                              color:
                                groupIdDatabase.workingDatabase.length > 300
                                  ? '#ff4d4f'
                                  : '#faad14',
                              backgroundColor:
                                groupIdDatabase.workingDatabase.length > 300
                                  ? '#fff2f0'
                                  : '#fff7e6',
                              padding: '2px 6px',
                              borderRadius: '4px',
                              fontSize: '11px',
                              fontWeight: 'bold',
                            }}
                          >
                            (–≤ —Ä–∞–±–æ—Ç–µ: {groupIdDatabase.workingDatabase.length})
                          </span>
                        </div>
                        <div
                          style={{
                            color:
                              groupIdDatabase.workingDatabase.length > 300
                                ? '#ff4d4f'
                                : '#8c8c8c',
                            fontSize: '11px',
                            fontWeight: 'normal',
                            fontStyle: 'italic',
                            marginTop: '2px',
                            fontFamily: 'monospace',
                          }}
                        >
                          üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ. –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ
                          —Å—Ç–∞—Ç—É—Å–æ–º "–≤ —Ä–∞–±–æ—Ç–µ". –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —ç—Ç–∏
                          –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏. –î–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –Ω–µ
                          –≤–ª–∏—è–µ—Ç –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è
                          –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.
                          {groupIdDatabase.workingDatabase.length > 300 && (
                            <span
                              style={{ color: '#ff4d4f', fontWeight: 'bold' }}
                            >
                              {' '}
                              ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤
                              —Ä–∞–±–æ—Ç–µ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.
                            </span>
                          )}
                        </div>
                      </div>
                    }
                    name="workingDatabase"
                  >
                    <Input.TextArea
                      rows={6}
                      disabled
                      style={{ backgroundColor: '#f5f5f5' }}
                    />
                  </Form.Item>
                </Col>
              </Row>
            )}

            <div className={styles.identifiersSectionTitle}>
              –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø AI
            </div>
            <Row gutter={16}>
              <Col span={24}>
                <Form.Item
                  name="aiRole"
                  label="–†–æ–ª—å AI –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
                  rules={[{ required: true, message: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' }]}
                >
                  <Input.TextArea
                    rows={1}
                    placeholder="–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ ..."
                  />
                </Form.Item>
              </Col>
              <Col span={24}>
                <Form.Item
                  name="companyDescription"
                  label="–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
                  rules={[{ required: true, message: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' }]}
                >
                  <Input.TextArea
                    rows={1}
                    placeholder="–ö–æ–º–ø–∞–Ω–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è ..."
                  />
                </Form.Item>
              </Col>
              <Col span={24}>
                <Form.Item
                  name="goal"
                  label="–¶–µ–ª–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
                  rules={[{ required: true, message: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' }]}
                >
                  <Input.TextArea
                    rows={1}
                    placeholder="–£–±–µ–¥–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ ..."
                  />
                </Form.Item>
              </Col>

              <Col span={24}>
                <Form.Item
                  name="leadDefinition"
                  label="–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ª–∏–¥–∞"
                  rules={[{ required: true, message: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' }]}
                >
                  <Input.TextArea
                    rows={1}
                    placeholder="–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ —É—Å–ª—É–≥–µ..."
                  />
                </Form.Item>
              </Col>

              <Col span={24}>
                <Form.Item
                  name="leadGoal"
                  label="–¶–µ–ª–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ –ª–∏–¥"
                  rules={[{ required: true, message: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' }]}
                >
                  <Input.TextArea
                    rows={1}
                    placeholder="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞..."
                  />
                </Form.Item>
              </Col>

              <Col span={24}>
                <Form.Item
                  name="part"
                  label="–£–Ω–∏–∫–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å (—Å—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞, —Å–∞–π—Ç, etc)"
                >
                  <Input placeholder="t.me/test" />
                </Form.Item>
              </Col>

              <Col span={24}>
                <Form.Item name="flowHandling" label="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤">
                  <Input.TextArea
                    rows={1}
                    placeholder="–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ .. —Ç–æ .."
                  />
                </Form.Item>
              </Col>
              <Col span={24}>
                <Form.Item
                  name="addedInformation"
                  label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                >
                  <Input.TextArea
                    rows={1}
                    placeholder="–û–±—å–µ–º–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–¥–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏"
                  />
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item
                  name="firstMessagePrompt"
                  label="–ü–µ—Ä–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
                  rules={[{ required: true, message: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' }]}
                >
                  <Input placeholder="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!" />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item
                  name="secondMessagePrompt"
                  label="–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å"
                  rules={[{ required: true, message: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' }]}
                >
                  <Input.TextArea
                    rows={1}
                    placeholder="–ó–∞–º–µ—Ç–∏–ª –≤–∞—Å –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö ..."
                  />
                </Form.Item>
              </Col>
            </Row>

            <Row gutter={16}>
              <Col span={24}>
                <Form.Item name="addedQuestion" label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å">
                  <Input.TextArea
                    rows={1}
                    placeholder="–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –≤—ã –∑–Ω–∞–∫–æ–º—ã —Å –∫–æ–º–ø–∞–Ω–∏–µ–π?"
                  />
                </Form.Item>
              </Col>
            </Row>
          </Form>
        )}
      </Spin>
    </Drawer>
  );
};
